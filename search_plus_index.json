{"./":{"url":"./","title":"Introduction","keywords":"","body":"前端入门宝典-心法篇   本文档是我在B站发布的前端入门系列经验分享之心法篇的配套文档，作为前端入门系列的分享课程，本课程涵盖了HTML和CSS在工作中最常用的标签和属性，以及JAVASCRIPT中主要的知识点，另外课程中还会对与这部分内容相关的一些面试题进行列举及讲解，希望对想要转行前端的同学有帮助。最后送大家一句话——对夯实基础练内功，日后江湖必成功。 为什么想要出这套系列课程   其实与其说这是一套课程，我更愿意将它当作是我对这6年前端职业生涯的一次自我的回顾。前段时间刚过完而立之年的生日，回首过往职业生涯，突然发现除了日渐圆滚的肚腩和可以媲美卧蚕的黑眼圈，好像也没其他什么了，不经有些迷惘，哦，不对不对，其实也是有些东西的，这不硬盘备份的资料已经好几个T的小姐姐了···哈哈开个玩笑，内容跑偏了，说回正题，也是最近的一次契机，要给一个刚毕业零基础的同学做前端培训，让我萌生了做视频的想法，为什么不把培训课程录制成视频，让更多的人看到，用我所长来帮助更多想要入门前端的同学，帮助他们开启前端的大门。   这时候也许有人会问，目前市面上同类型的课程很多，付费的免费的，并且都是名师或者BAT大厂大牛带着你玩转前端，再出这样同质化视频不是多此一举嘛，直接找套好的课程不就完事了，难道你比人家名师和大牛更厉害，教学经验更丰富？确实目前已存在很多优秀的同类型课程，并且都是多年教学经验的讲师或者BAT大厂的大牛亲自指导授课，这点我承认确实比不上，哈哈，但是为什么我还是要做呢，其实主要是基于以下几点原因，且听我慢慢道来： 培训的本质是什么，传道受业解惑，传的的是前端知识，受的是讲师真实的职业经历，解的是学员自身的迷茫和疑惑，所传授的应该是讲师自身的东西，而不是别人的东西，拿别人的东西，传别人的经历，毕竟不是自己的东西也传不好，这也是对学员的不负责任。 正是由于同类型的课程太多了，即便我们要用，那怎么选择是个难题，都是资深前辈，怎么判断谁好谁坏，每个讲师都有自己的特点，都有自己的受众群体，这个是一个难以抉择的事情。 最后最重要的一点，我想给自己而立之前的人生道路留下点值得回忆的事情。不知道大家有没有这样的经历，经常想做一些事情，可是由于种种原因，迟迟没有去做，最后就不了了之了，所以如果有想做的事就立马去做，不要想太多，只有做出来才知道好坏，只有做出来才会有成长。 课程的规划 关于前端内容的分享我规划了三期： 第一期：前端入门宝典-心法篇，也就是大家现在看到的这部分，喜欢武侠小说的小伙伴都知道，对于越厉害的武功，心法就越重要，心法是武功的根，即便你会招式，不会心法也无法发挥出武功的威力，对于前端学习也一样，前端三件套：HTML、CSS以及JAVASCRIPT，这些就是前端的心法，前端这些年的发展日新月异，知识的更新迭代速度非常快，但是当你学会了基础，并且掌握扎实了，无论出现什么新的知识和技术你都可以轻松学会，万变不离其宗，并且对于软件开发的人来说，学习不仅是学习新知识新技能，更重要的是学习开发思想，这个才是最重要的，要知其然更要知其所以然。 第二期：前端入门宝典-进阶篇，这部分会讲到HTML5、CSS3以及ES6给我们带来的新的功能和特性，如何利用算法处理实际工作中遇到的问题，说到算法有很多初学者会觉得算法那是后端的事，和前端没关系，前端不就是画画页面，获取下数据，展示下数据，其实不然，什么是算法，用百度百科的解释，算法就是解题方案的准确而完整的描述，举个最简单的例子：如何获取a到b区间的随机整数？估计很多有点经验的同学都会这个公式：Math.floor(Math.random()*(b-a+1)+a)，结合百度百科的解释，这个公式其实就是上述问题的算法，如果工作中有这样的需求，难道你要和后端说：嘿老铁，给个接口我取个随机数？&#x1F644;估计会被后端的白眼给盯死 第三期：前端入门宝典-利刃篇，这部分会讲到前端开发用到的一些框架，比如VUE，VUE的使用以及我对VUE底层的东西的一些理解，比如render函数，如何自己实现一个render函数，下面就是和VUE风格非常类似的微信小程序、UNIAPP的学习，以及Element-UI专注于后台的UI框架的使用，看到这里大家可能会说，不是还有React，React我就不讲了，React虽然是很优秀的框架，但是我没用过也没系统学习过没资格讲，也讲不了，这不是误人子弟嘛&#x1F602; 本套课程适用人群   首先呢就是零基础的小白同学啦。有一定的经验的同学显然也可以，人无完人总会有点欠缺，差缺补漏下，就当我帮你们整理了份比较详细的学习笔记了。对于大牛那肯定就不用看了，但是我还是希望有大牛能够看到，能给我些宝贵的建议，做的不好的地方还请不吝赐教，帮助我成长，哈哈&#x1F61D; 学习建议   对于想要入门的同学，我的建议是每天至少要抽出2-3个小时时间来学习，学习后多找些相关的题目来练习，同时我建议不一定要用我的这份电子书，大家可以根据所学内容整理出属于自己的学习笔记。在下面的前置知识里会有详细的笔记创建方式，这部分内容不会通过视频形式讲解，大家就按照笔记里的操作步骤自己研究，有问题可以在其他相关视频留言或者给我私信。 课程更新   我会尽量抽出时间，争取每周出两到三期的视频，但是不能保证啊，有时候项目比较赶，可能就没有时间出视频了，还请大家能以一颗包容的心谅解我，哈哈，Laughing在此谢过了\b\b&#x1F91D; Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 14:30:41 "},"pages/00-前置知识/":{"url":"pages/00-前置知识/","title":"前置知识","keywords":"","body":"前置知识 这部分内容主要是为了方便日后的学习 GIT的安装使用 Nodejs环境安装 Gitbook的使用 Markdown文档语法 VSCODE的安装及插件 Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 15:04:52 "},"pages/00-前置知识/01-GIT的安装使用.html":{"url":"pages/00-前置知识/01-GIT的安装使用.html","title":"GIT的安装使用","keywords":"","body":"GIT的安装及使用 认识GIT Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理 常用GIT平台 github、gitlab、gitee等 GIT工具安装 Windows版下载： 32-bit Git for Windows Setup：下载地址 64-bit Git for Windows Setup：下载地址 Mac版下载： 64-bit Git for Mac Setup：下载地址 GIT配置 由于git是分布式管理工具，需要输入用户名和邮箱以作为标识，因此，在命令行输入下列的命令： # 设置用户名 git config --global user.name \"Laughing小石头\" # 设置邮箱 git config --global user.email \"991107056@qq.com\" 建议：此处设置的用户名和邮箱建议与你在用的git平台所注册的用户名和邮箱一致 GIT与其他版本管理工具的对比 这里的其他版本管理工具主要指SVN SVN：SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就郁闷了。 GIT：GIT是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 GIT常用命令 版本库克隆（下载代码）git clone 版本库地址 版本库创建git init 将文件提交到暂存区# 添加单个文件 git add 文件名 # 添加所有文件 git add * 将暂存区文件提交到仓库git commit -m \"说明文字\" 将本地仓库和线上空仓库关联git remote add origin 线上仓库地址 将本地仓库的内容推送到线上# 如果是第一次推送master分支时需要加上 -u 参数，Git会将本地的master分支内容推送的远程新的master分支，还会把两个master分支关联起来，在以后的推送或者拉取时就可以简化操作 git push -u origin master # 简化操作 git push 拉取线上最新代码git pull 版本冲突解决# 回退到上一个版本 git reset --hard HEAD^ # 获取历史版本号 git reflog # 回退到该版本号对应的版本 git reset --hard Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-13 14:43:40 "},"pages/00-前置知识/02-Nodejs环境安装.html":{"url":"pages/00-前置知识/02-Nodejs环境安装.html","title":"Nodejs环境安装","keywords":"","body":"Nodejs的安装及使用 认识Nodejs Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js安装 官网下载 nvm   这里推荐第二种方式，通过nvm来管理node的版本，对于软件安装来说我们常常会选择安装最新版，但是我们在今后的开发当中，有些东西对于新版的node并不兼容，不如下篇文档中要讲的gitbook这个软件，经测试新版本并不兼容，需要用到v10.21.0版本的node，在不借助第三方工具的情况下，我们只能先卸载旧版本，再安装新版本，这样非常麻烦，nvm就很好的帮我解决了这个问题。 nvm工具安装 Windows版安装：下载地址 下载好后解压直接双击安装，安装完成后在CMD命令窗口输入nvm -v，输出如下版本号即证明安装成 Running version 1.1.7 Mac版安装： # 1.先安装brew（不会的自行百度），在利用brew安装nvm brew install nvm # 2.添加环境变量，进入到当前用户的更目录，按shift+command+.显示隐藏文件，找到.bash_profile和.zshrc（新版mac系统用了zsh的shell工具，所以.zshrc也要配置下），添加如下配置 source $(brew --prefix nvm)/nvm.sh # 3.运行下面命令，让配置生效 source ~/.bash_profile 或者 source ~/.bash_profile nvm工具安装及管理node # 1.通过nvm查看当前可安装的node版本 nvm list available # 2.安装node nvm install 版本号 # 3.设置当前要使用的node版本 nvm use 版本号 # 4.设置默认node版本 nvm alias default 版本号 Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-13 15:11:50 "},"pages/00-前置知识/03-Gitbook的使用.html":{"url":"pages/00-前置知识/03-Gitbook的使用.html","title":"Gitbook的使用","keywords":"","body":"Gitbook的安装及使用 认识Gitbook GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，我们的教程就是通过gitbook和Markdown来编写的，关于Markdown的用法可以看下篇文档。 GitBook 官网 GitBook 文档 安装 GitBook 首先就是安装nodejs环境，这里推荐使用v10.21.0版本nvm install v10.21.0 安装gitbooknpm install gitbook-cli -g Gitbook 的使用 进入项目文档cd 文档目录 创建book.json文件{ // 电子书名称 \"title\": \"前端入门宝典-心法篇\", // 作者 \"author\": \"Laughing小石头\", // 书籍描述 \"description\": \"夯实基础练内功，日后江湖必成功\", // 书籍语言环境zh-hans表示中文 \"language\": \"zh-hans\", // 文档目录 \"root\": \"docs\", // 文档插件 \"plugins\": [ // 导航目录折叠插件 \"chapter-fold\", // 版权页脚插件 \"tbfed-pagefooter\" ], // 插件配置 \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy web-develop-guide (2021 - present)\" } } } 初始化书籍gitbook init 安装配置中的插件gitbook install 在浏览器预览gitbook serve Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-13 15:39:31 "},"pages/00-前置知识/04-Markdown文档语法.html":{"url":"pages/00-前置知识/04-Markdown文档语法.html","title":"Markdown文档语法","keywords":"","body":"Markdown文档语法 认识Markdown Markdown是一种轻量级标记语言，具有纯文本格式语法，通过简单标记语法，使普通文本内容具有一定格式。他可以转换为许多输出格式，常见的HTML/PDF/WORD等。当然Markdown也有一定的局限性，比如设置字体颜色和图片大小，不过我们可以通过html标签去实现。 一、标题 常规标题：使用#号可表示 1-6 级标题，一级标题对应一个#号，二级标题对应两个#号，以此类推。（注：#和标题文字间需要用空格隔开） ``` // 示例 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 ``` 效果如下： 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 二、字体 加粗：要加粗的文字左右分别用2个*号包起来 斜体：要倾斜的文字左右分别用1个*号包起来 斜体加粗：要倾斜和加粗的文字左右分别用3个*号包起来 删除线：要加删除线的文字左右分别用两个~~号包起来 // 示例 **这是加粗的文字** *这是倾斜的文字*` ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ 效果如下： 这是加粗的文字 这是倾斜的文字 这是斜体加粗的文字 这是加删除线的文字 三、区块 区块：在段落开头使用 > 符号 ，然后后面紧跟一个空格符号 // 示例 > 区块引用 > 区块引用 效果如下： 区块引用 区块嵌套：一个 > 符号是最外层，两个 > 符号是第一层嵌套，以此类推 // 示例 > 最外层 > > 第一层嵌套 > > > 第二层嵌套 效果如下： 最外层 第一层嵌套 第二层嵌套 4、图片 // 语法 ![图片alt](图片地址 '图片标题（可选）') // 示例 ![动漫图片](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201510%2F04%2F20151004215826_MYJkE.png&refer=http%3A%2F%2Fb-ssl.duitang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1623401278&t=60449065c481b25df96e28a16c778ceb '动漫图片标题') 效果如下： 5、链接 // 语法 [超链文本内容](超链接地址 \"超链接title\") // 示例 [百度](http://baidu.com) 效果如下： 百度 6、列表 无序列表：无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格 // 示例 * 第一项 + 第一项 - 第一项 效果如下： 第一项 第一项 第一项 有序列表：使用数字并加上 . 号来表示，这些标记后面要添加一个空格 // 示例 1. 第一项 2. 第二项 3. 第三项 效果如下： 第一项 第二项 第三项 列表嵌套：列表嵌套只需在子列表中的选项前面添加四个空格即可 // 示例 1. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素 2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 效果如下： 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 7、表格 // 语法 表头|表头|表头 ---|:--:|---: 内容|内容|内容 内容|内容|内容 第二行分割表头和内容。 - 有一个就行，为了对齐，多加了几个 文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右 注：原生的语法两边都要用 | 包起来。此处省略 // 示例 表头|表头|表头 --|:--:|--: |单元格|单元格|单元格| |单元格|单元格|单元格| |单元格|单元格|单元格| 效果如下： 表头|表头|表头 --|:--:|--: |单元格|单元格|单元格| |单元格|单元格|单元格| |单元格|单元格|单元格| 8、代码 单行代码：果是段落上的一个函数或片段的代码可以用反引号把它包起来（`） // 示例 Javascript开发中我们可以通过`console.log()`在控制台中输出内容 效果如下： Javascript开发中我们可以通过console.log()在控制台中输出内容 整段代码：可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定） $(document).ready(function () { alert('Hello World'); }); Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-12 17:14:11 "},"pages/00-前置知识/05-VSCODE的安装及插件.html":{"url":"pages/00-前置知识/05-VSCODE的安装及插件.html","title":"VSCODE的安装及插件","keywords":"","body":"VSCODE的安装及使用 认识VSCode Visual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义快捷键、括号匹配和颜色区分、代码片段、代码对比 Diff、GIT命令 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。 俗话说工欲善其事必先利其器，一款便捷好用的编辑器对于开发人员来讲十分重要，这里隆重推荐这款有微软开发的Visual Studio Code，不仅好用，最最最关键，免费，免费，免费，重要的说三遍。 我们可以访问VSCode官网下载最新版的VSCODE。 安装完成效果图如下： VSCode插件安装 中文插件 你们刚安装好可能和我的有些许不同，我的是中文的，你们是英文的，那么我们要怎么让他显示中文呢，请看下图： Sublime快捷键扩展 在插件中心搜索Sublime，安装插件即可，sublime快捷键有一个非常好用的，多行编辑，大家可以下载下来自行体会 VSCode简单配置 关闭右侧预览 VSCode默认开启预览功能，如果屏幕比较小会很占用空间，所以正常会将它关闭 关闭空文件夹折叠 VSCode默认开启空包折叠，简单来就是空的文件夹左侧目录导航就会只显示一个路径，不知道大家感觉如何，我个人是感觉很难受，所以我正常会把这个关闭 单击新文件会覆盖旧文件窗口 VSCode安装好后当我们想打开多个文件的时候会出现一个问题，单击新的文件，新的文件会在当前窗口打开，之前打开的文件就被关闭了，这样很不友好，所以我会将这个功能关闭 Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 15:06:14 "},"pages/00-前置知识/06-迅睿CMS系统学习文档.html":{"url":"pages/00-前置知识/06-迅睿CMS系统学习文档.html","title":"迅睿CMS系统学习文档","keywords":"","body":"迅睿CMS系统学习文档 迅睿CMS系统是一款基于CodeIgniter框架的免费、简洁、高效、灵活的PHP内容管理系统，为您的网站提供一个完美的开源解决方案。 一、安装使用 1. 安装环境 1.1 系统环境 1）如果电脑内存有16G，强烈建议使用centos7的虚拟机安装宝塔面板来配置环境，这样会更加接近生产，避免环境不一造成的兼容性问题，虚拟机推荐： MAC端：Parallels Desktop 15 for Mac (可以用试用版或者找PJ版) WIN端：VMware Workstation（直接官网下载，然后百度找激活码） 2）如果电脑配置不够可以是用集成环境： MAC端：MAMP Pro for Mac (可以用试用版或者找PJ版) WIN端：phpstudy 8.0（免费应用，官网自行下载） 1.2 软件环境 PHP 7.2+ MySql 5.6+ 2. 安装步骤 注：如果是在CENTOS虚拟机中安装，上传文件一定要使用ftp方式上传，不要用sftp，会造成文件权限过高，不仅影响安全性，还有可能导致程序出现无法预知的问题。 3. 目录结构 | |-- api // 接口调用入口、编辑器等 |-- cache // 缓存文件目录，可自定义位置 |-- config // 用户的一些自定义配置、自定义函数、自定义钩子等 |-- dayrui // 系统核心程序目录 | |-- App // 应用程序目录、自定义应用、自定义插件、自定义模型 | |-- Core // 迅睿CMS项目目录 | |-- Fcms // 迅睿CMS程序类目录 | |-- System // CodeIgniter框架目录 |-- mobile // 移动端主入口文件夹 |-- static // 静态资源目录 | |-- assets // 全局静态资源 | |-- default // 默认模板静态资源 | |-- custom // 自定义模板静态资源目录（可以根据实际网站名称自定义） |-- template // 模板目录 | |-- mobile // 移动端模板 | |-- pc // PC端模板 | |-- default // PC端默认模板目录 | |-- custom // 自定义模板目录（可以根据实际网站名称自定义） |-- uploadfile // 附件上传目录 |-- admin.php // 后台主入口 |-- index.php // 前端主入口 |-- install.php // 系统安装主入口，正式部署时需要删除该文件 | 4. 数据表说明 详情见后台->系统->系统维护->数据字典 二、后台操作 1. 设置板块 2. 内容板块 三、模板开发 1. 模板定义 模板目录 模板关联（后台添加栏目） 2. 模板语法 2.1 模板引用 1）引用本目录下的xxx.html，当本目录不存在时会引用主目录下的xxx.html {template \"xxx.html\"} 2）强制引用主目录下的xxx.html {template \"xxx.html\", \"/\"} 2.2 变量、常量、数组 遵循php的语法 1）变量 {$变量名} 例1、输出变量 {$test}表示输出test变量 例2、变量计算 {$test+1}表示test变量加了一个1，再输出 2）常量 {大写字母} 常量是固定的值，输出常量{SITE_URL} 3）数组 {$数组名[键1]}、{$数组名[键1][键2]}、... 4）简易数组 {$数组名.键1}、{$数组名.键2} （最多支持3级，最好直接输出） 2.3 判断语句 // 支持的运算符：> 、= 、 {if $模板变量1 运算符 $模板变量2} 模板内容1 {else if $模板变量1 运算符 $模板变量3} 模板内容2 {else} 模板内容3 {/if} 3. 模板常用变量 详情请见官方说明文档：模板变量 网站首页常用变量 变量代码 说明 {$meta_title} 页面头部标题 {$meta_keywords} 页面头部关键字，采用网站关键字 {$meta_description} 页面头部描述，采用网站描述 {$indexc} 用于判断是否是首页 4. 模板常用标签 详情请见官方说明文档：标签调用，这里只对比较常用的标签做一些简单的整理，具体使用可以看官方的模板 4.1 导航栏调用 {category module=share pid=0} {$t.name} {if $t.child} {category module=share pid=$t.id return=t2} {$t2.name} {if $t2.child} {category module=share pid=$t2.id return=t3} {$t3.name} {/category} {/if} {/category} {/if} {/category} 4.2 任意模块的数据调用，官方文档 {module module=news order=updatetime num=9} 链接地址：{$t.url} 新闻标题：{$t.title} 或者 {dr_strcut($t.title, 20)}（不建议） 缩略图片：{dr_thumb($t.thumb, 宽, 高, 是否水印)} 或者原图 {dr_get_file($t.thumb)} 发布时间：{$t.updatetime} 或者 {dr_date($t._updatetime, 'Y-m-d')} {/module} 4.3 列表页数据调用 这里使用的方法其实和4.2一样，多了两个参数catid（当前栏目ID）和page（分页） {module catid=$catid order=updatetime page=1} {/module} {$pages} 四、经验分享 1. 开发时使用正式域名 2. 列表循环时使用序号 {$key+1} Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-19 08:58:56 "},"pages/01-第一章 认识前端/":{"url":"pages/01-第一章 认识前端/","title":"第一章 认识前端","keywords":"","body":"Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-13 21:00:23 "},"pages/02-第二章 HTML基础/":{"url":"pages/02-第二章 HTML基础/","title":"第二章 HTML基础","keywords":"","body":"Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 14:47:38 "},"pages/03-第三章 CSS基础/":{"url":"pages/03-第三章 CSS基础/","title":"第三章 CSS基础","keywords":"","body":"Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 14:47:43 "},"pages/04-第四章 JAVASCRIPT基础/":{"url":"pages/04-第四章 JAVASCRIPT基础/","title":"第四章 JAVASCRIPT基础","keywords":"","body":"Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 14:49:24 "},"pages/05-第五章 认识DOM/":{"url":"pages/05-第五章 认识DOM/","title":"第五章 认识DOM","keywords":"","body":"Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 14:50:39 "},"pages/06-第六章 认识BOM/":{"url":"pages/06-第六章 认识BOM/","title":"第六章 认识BOM","keywords":"","body":"Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 14:50:40 "},"pages/07-第七章 面向对象/":{"url":"pages/07-第七章 面向对象/","title":"第七章 面向对象","keywords":"","body":"Copyright © web-develop-guide (2021 - present) all right reserved，powered by GitbookFile Modify: 2021-05-17 14:58:05 "}}